var searchIndex = JSON.parse('{\
"landlock":{"doc":"Landlock is a security feature available since Linux 5.13. …","t":[4,18,8,13,4,4,13,4,13,4,13,3,18,13,13,4,4,8,13,13,4,13,18,13,13,13,13,13,4,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,4,3,4,13,13,13,13,13,13,4,3,8,3,3,4,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,12,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["ABI","ALL","Access","Access","AccessError","AccessFs","AddRuleCall","AddRuleError","AddRules","AddRulesError","BestEffort","BitFlags","CONST_TOKEN","Compat","Compat","CompatError","CompatLevel","Compatible","CreateRuleset","CreateRulesetCall","CreateRulesetError","DirectoryAccess","EMPTY","Empty","Execute","Fs","Fs","FullyEnforced","HandleAccessError","HandleAccesses","HandleAccessesError","HardRequirement","Incompatible","MakeBlock","MakeChar","MakeDir","MakeFifo","MakeReg","MakeSock","MakeSym","MissingHandledAccess","NotEnforced","OpenCall","PartiallyCompatible","PartiallyEnforced","PathBeneath","PathBeneath","PathBeneathError","PathFd","PathFdError","ReadDir","ReadFile","RemoveDir","RemoveFile","RestrictSelf","RestrictSelfCall","RestrictSelfError","RestrictionStatus","Rule","Ruleset","RulesetCreated","RulesetError","RulesetStatus","SetNoNewPrivsCall","SoftRequirement","StatCall","UnhandledAccess","Unknown","Unsupported","V1","WriteFile","add_rule","add_rules","all","as_raw_fd","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bits","bits","bits_c","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains","create","default","drop","empty","eq","eq","eq","eq","eq","eq","exactly_one","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_all","from_all","from_bits","from_bits_truncate","from_bits_truncate_c","from_bits_unchecked","from_bits_unchecked_c","from_flag","from_iter","handle_access","hash","insert","intersection_c","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_empty","iter","len","make_bitflags","ne","new","new","new","no_new_privs","not","not","not_c","remove","restrict_self","ruleset","set_compatibility","set_compatibility","set_compatibility","set_compatibility","set_no_new_privs","source","source","source","source","source","source","source","source","source","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union_c","access","access","access","incompatible","unknown","0","access","incompatible","source","0","0","0","source","0","0","access","incompatible","source","path","source","source","source","0","0","0","0"],"q":["landlocklandlock::AccessError","","","","","landlock::AddRuleError","","","","landlock::AddRulesError","landlock::CompatError","","landlock::CreateRulesetError","landlock::HandleAccessError","landlock::HandleAccessesError","landlock::PathBeneathError","","","landlock::PathFdError","","landlock::RestrictSelfError","","landlock::RulesetError","","",""],"d":["Version of the Landlock ABI.","A <code>BitFlags</code> with all flags set. Equivalent to <code>all()</code>, but …","","","","File system access right.","The <code>landlock_add_rule()</code> system call failed.","Identifies errors when adding a rule to a ruleset.","","Identifies errors when adding rules to a ruleset thanks to …","Takes into account the requests if they are supported by …","Represents a set of flags of some type <code>T</code>. <code>T</code> must have the …","A <code>ConstToken</code> for this type of flag.","","","","","Properly handles runtime unsupported features.","","The <code>landlock_create_ruleset()</code> system call failed.","Identifies errors when creating a ruleset.","This error is returned by <code>RulesetCreated::add_rule()</code> if …","An empty <code>BitFlags</code>. Equivalent to <code>empty()</code>, but works in a …","The access-rights set is empty, which doesn’t make sense …","Execute a file.","","","All requested restrictions are enforced.","Identifies errors when updating the ruleset’s handled …","","","Takes into account the requests if they are supported by …","The best-effort approach was (deliberately) disabled and …","Create (or rename or link) a block device.","Create (or rename or link) a character device.","Create (or rename) a directory.","Create (or rename or link) a named pipe.","Create (or rename or link) a regular file.","Create (or rename or link) a UNIX domain socket.","Create (or rename or link) a symbolic link.","Missing call to <code>Ruleset::handle_access()</code>.","The running system doesn’t support Landlock or a subset …","The <code>open()</code> system call failed.","The best-effort approach was (deliberately) disabled and …","Some requested restrictions are enforced, following a …","Landlock rule for a file hierarchy.","","","Simple helper to open a file or a directory with the <code>O_PATH</code>…","","Open a directory or list its content.","Open a file with read access.","Remove an empty directory or rename one.","Unlink (or rename) a file.","","The <code>landlock_restrict_self() </code>system call failed.","","Status of a <code>RulesetCreated</code> after calling <code>restrict_self()</code>.","","Landlock ruleset builder.","Ruleset created with <code>Ruleset::create()</code>.","Maps to all errors that can be returned by a ruleset …","Enforcement status of a ruleset.","The <code>prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)</code> system call …","Takes into account the requests if they are supported by …","To check that access-rights are consistent with a file …","The rule’s access-rights are not all handled by the …","The access-rights set was forged with the unsafe …","Kernel not supporting Landlock, either because it is not …","First Landlock ABI, introduced with Linux 5.13.","Open a file with write access.","Attempts to add a new rule to the ruleset.","Attempts to add a set of new rules to the ruleset.","Create a <code>BitFlags</code> with all flags set.","","","","","","","","Returns the underlying bitwise value.","","Returns the underlying bitwise value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if all flags are contained.","Attempts to create a real Landlock ruleset (if supported …","","","Create a <code>BitFlags</code> with no flags set (in other words, with …","","","","","","","If exactly one flag is set, the flag is returned. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the access rights defined by a specific <code>ABI</code>.","","Returns a <code>BitFlags&lt;T&gt;</code> if the raw value provided does not …","Create a <code>BitFlags&lt;T&gt;</code> from an underlying bitwise value. If …","Create a <code>BitFlags&lt;T&gt;</code> from an underlying bitwise value. If …","Create a new BitFlags unsafely, without checking if the …","Create a new BitFlags unsafely, without checking if the …","Turn a <code>T</code> into a <code>BitFlags&lt;T&gt;</code>. Also available as <code>flag.into()</code>.","","Attempts to add a set of access rights that will be …","","Inserts the flags into the BitFlag","Bitwise AND — return value contains flag if both …","Returns true if at least one flag is shared.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if all flags are set","Returns true if no flag is set","Returns an iterator that yields each set flag","Returns the number of flags set.","<code>make_bitflags!</code> provides a succint syntax for creating …","","Creates a new <code>PathBeneath</code> rule identifying the <code>parent</code> …","","Returns a new <code>Ruleset</code>. This call automatically probes the …","Status of <code>prctl(2)</code>’s <code>PR_SET_NO_NEW_PRIVS</code> enforcement.","","","Bitwise NOT — return value contains flag if argument …","Removes the matching flags","Attempts to restrict the calling thread with the ruleset …","Status of the Landlock ruleset enforcement.","FIXME: integrate …","","","","Configures the ruleset to call <code>prctl(2)</code> with the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the matching bits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bitwise OR — return value contains flag if either …","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,2,0,0,3,0,4,0,5,0,1,6,3,0,0,0,4,7,0,8,1,9,10,11,12,13,0,4,0,5,9,10,10,10,10,10,10,10,7,13,14,9,13,0,2,0,0,0,10,10,10,10,4,15,0,0,0,0,0,0,0,15,5,8,3,9,16,16,10,17,17,1,18,1,10,1,1,10,1,1,10,1,1,10,1,19,1,18,20,17,16,5,4,6,11,7,3,12,2,8,9,15,14,10,13,21,19,1,18,20,17,16,5,4,6,11,7,3,12,2,8,9,15,14,10,13,21,1,16,5,10,1,16,5,10,1,20,1,17,1,1,1,5,10,13,21,1,1,1,1,1,1,1,1,5,4,4,6,6,11,11,7,7,3,3,12,12,2,2,8,8,9,9,15,15,14,14,10,13,21,19,1,1,18,20,17,16,5,4,4,4,4,4,6,6,11,11,7,3,3,12,12,2,2,2,8,9,15,14,10,13,21,22,10,1,1,1,1,1,1,1,20,1,1,1,1,19,1,18,20,17,16,5,4,6,11,7,3,12,2,8,9,15,14,10,13,21,1,1,1,1,1,0,21,19,18,20,21,1,10,1,1,17,21,23,19,20,17,17,4,6,11,7,3,12,2,8,15,14,1,16,5,10,1,4,6,11,7,3,12,2,8,9,15,14,1,19,1,1,1,1,1,1,18,20,17,16,5,4,6,11,7,3,12,2,8,9,15,14,10,13,21,19,1,18,20,17,16,5,4,6,11,7,3,12,2,8,9,15,14,10,13,21,19,1,18,20,17,16,5,4,6,11,7,3,12,2,8,9,15,14,10,13,21,1,24,25,26,26,24,27,28,28,29,30,31,32,33,34,35,36,36,37,38,38,39,40,41,42,43,44],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["ruleseterror",4]]]],[[],["result",4]],[[],["bitflags",3]],[[["",0]],["rawfd",6]],[[],["bitflags",3]],[[]],[[["",0]]],[[],["bitflags",3]],[[]],[[["",0]]],[[]],[[]],[[],["u8",0]],[[],["bitflags",3]],[[]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bitflags",3]],[[["",0]],["abi",4]],[[["",0]],["compatlevel",4]],[[["",0]],["accessfs",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["bool",0]],[[],["result",4,[["rulesetcreated",3],["ruleseterror",4]]]],[[],["bitflags",3]],[[["",0]]],[[],["bitflags",3]],[[["",0],["bitflags",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["compatlevel",4]],["bool",0]],[[["",0],["accessfs",4]],["bool",0]],[[["",0],["rulesetstatus",4]],["bool",0]],[[["",0],["restrictionstatus",3]],["bool",0]],[[],["option",4]],[[["",0]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["bitflags",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["handleaccesseserror",4]]],[[["createruleseterror",4]]],[[["addruleserror",4]]],[[["restrictselferror",4]]],[[]],[[["compaterror",4]]],[[]],[[["handleaccesserror",4]]],[[]],[[["compaterror",4]]],[[]],[[]],[[["addruleerror",4]]],[[["accesserror",4]]],[[]],[[["pathbeneatherror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["abi",4]],["bitflags",3]],[[["abi",4]],["bitflags",3]],[[],["result",4,[["bitflags",3],["frombitserror",3]]]],[[],["bitflags",3]],[[["u8",0],["consttoken",3,[["u8",0]]]],["bitflags",3,[["u8",0]]]],[[],["bitflags",3]],[[["u8",0],["consttoken",3,[["u8",0]]]],["bitflags",3,[["u8",0]]]],[[],["bitflags",3]],[[],["bitflags",3]],[[],["result",4,[["ruleseterror",4]]]],[[["",0],["",0]]],[[["",0]]],[[["bitflags",3,[["u8",0]]]],["bitflags",3,[["u8",0]]]],[[],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[],["iter",3]],[[],["usize",0]],null,[[["",0],["restrictionstatus",3]],["bool",0]],[[]],[[],["result",4,[["pathfderror",4]]]],[[]],null,[[],["bitflags",3]],[[]],[[["consttoken",3,[["u8",0]]]],["bitflags",3,[["u8",0]]]],[[["",0]]],[[],["result",4,[["restrictionstatus",3],["ruleseterror",4]]]],null,[[["compatlevel",4]]],[[["compatlevel",4]]],[[["compatlevel",4]]],[[["compatlevel",4]]],[[["bool",0]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["bitflags",3]]]],[[],["result",4,[["bitflags",3]]]],[[],["result",4,[["bitflags",3]]]],[[],["result",4,[["bitflags",3]]]],[[],["result",4,[["bitflags",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["bitflags",3,[["u8",0]]]],["bitflags",3,[["u8",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"BitFlags"],[4,"CompatError"],[4,"AddRuleError"],[4,"RulesetError"],[4,"CompatLevel"],[4,"HandleAccessError"],[4,"CreateRulesetError"],[4,"PathBeneathError"],[4,"AccessError"],[4,"AccessFs"],[4,"HandleAccessesError"],[4,"AddRulesError"],[4,"RulesetStatus"],[4,"PathFdError"],[4,"RestrictSelfError"],[4,"ABI"],[3,"RulesetCreated"],[3,"PathFd"],[3,"PathBeneath"],[3,"Ruleset"],[3,"RestrictionStatus"],[8,"Access"],[8,"Compatible"],[13,"Unknown"],[13,"Incompatible"],[13,"PartiallyCompatible"],[13,"Compat"],[13,"UnhandledAccess"],[13,"AddRuleCall"],[13,"Fs"],[13,"PathBeneath"],[13,"Access"],[13,"CreateRulesetCall"],[13,"Compat"],[13,"Fs"],[13,"DirectoryAccess"],[13,"StatCall"],[13,"OpenCall"],[13,"SetNoNewPrivsCall"],[13,"RestrictSelfCall"],[13,"HandleAccesses"],[13,"CreateRuleset"],[13,"AddRules"],[13,"RestrictSelf"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};