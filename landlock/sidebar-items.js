initSidebarItems({"enum":[["ABI","Version of the Landlock ABI."],["AccessError",""],["AccessFs","File system access right."],["AddRuleError","Identifies errors when adding a rule to a ruleset."],["AddRulesError","Identifies errors when adding rules to a ruleset thanks to an iterator returning Result<Rule, E> items."],["CompatError",""],["CompatLevel",""],["CreateRulesetError","Identifies errors when creating a ruleset."],["HandleAccessError","Identifies errors when updating the rulesetâ€™s handled access-rights."],["HandleAccessesError",""],["PathBeneathError",""],["PathFdError",""],["RestrictSelfError",""],["RulesetError","Maps to all errors that can be returned by a ruleset action."],["RulesetStatus","Enforcement status of a ruleset."]],"macro":[["make_bitflags","`make_bitflags!` provides a succint syntax for creating instances of `BitFlags<T>`. Instead of repeating the name of your type for each flag you want to add, try `make_bitflags!(Flags::{Foo | Bar})`."]],"struct":[["BitFlags","Represents a set of flags of some type `T`. `T` must have the `#[bitflags]` attribute applied."],["PathBeneath","Landlock rule for a file hierarchy."],["PathFd","Simple helper to open a file or a directory with the `O_PATH` flag."],["RestrictionStatus","Status of a [`RulesetCreated`] after calling `restrict_self()`."],["Ruleset","Landlock ruleset builder."],["RulesetCreated","Ruleset created with [`Ruleset::create()`]."]],"trait":[["Access",""],["Compatible","Properly handles runtime unsupported features."],["Rule",""]]});